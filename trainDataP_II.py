# Program Name: trainDataP_II
# Name: Charles
# Date: May 24
# Description: This is the program used as a supplimentary to ai_teacher_P_II.py. It will be used to return
#                       the training text

# the training text
sentence = "What is inheritance in programming? From a programming standpoint inheritance acts as a means in which classes can share the same existing methods, and or fields. It is important to note that there are some keywords that are only applied when using inheritance. We need to constantly refer back to the notion of hierarchies when working with applications of inheritance to ensure that there are proper relationships amongst classes. Review Example: Let’s say that we want to define a Book class that will simply have a single method that will output the number of pages. The number of pages will also act as a field for this particular class. UML diagram is a diagram. computer science is a subject that studies information. object-oriented programming is a way of coding things by making blueprints. time complexity is time taken for program to run. data structures are ways to store data. recursion is a way of calling function inside function.Machine learning is a branch of artificial intelligence (AI) and computer science which focuses on the use of data and algorithms to imitate the way that humans learn, gradually improving its accuracy. A subset of machine learning is closely related to computational statistics, which focuses on making predictions using computers; but not all machine learning is statistical learning. The study of mathematical optimization delivers methods, theory and application domains to the field of machine learning. Data mining is a related field of study, focusing on exploratory data analysis through unsupervised learning.[5][6] Some implementations of machine learning use data and neural networks in a way that mimics the working of a biological brain.[7][8] In its application across business problems, machine learning is also referred to as predictive analytics. A neural network is a series of algorithms that endeavors to recognize underlying relationships in a set of data through a process that mimics the way the human brain operates. Since the constructor method is inside the Fraction class, it can change the values of private fields within that class. When encapsulating data it is important to still provide some functionality to enable runner files to create, set or change the values stored in these fields. This is where we have to revert back to focusing on accessor and mutator methods. Bubble Sort: This sort algorithm starts at the beginning and compares each adjacent pair and swaps if they are not in correct order. This will bring the largest value to the end of the list each run, so it must run n times through the list. It is called bubble sort because of the way the smallest values tend to “bubble” to the front. Insertion Sort: A sorting algorithm that takes a list and sorts it one item at a time. That is, it will first compare the first and second item. If the second is smaller, it will get “inserted” in front of the first. The second is then compared to the third. If the third is smaller, it must also be compared to the first to be sure exactly where to insert it. ACCESSOR METHODS: Methods that allow us to gain access to the values in private fields. Usually begin with the word GET. 3.3 Interfaces LG: to learn about programming with interfaces and how they are a useful application of OOP. An interface in Java is a collection of constants and “abstract methods”. An abstract method is a method that does not have any code implementation. Essentially there is no body of code for each of these methods. An important point to note is that you cannot create or instantiate an interface. A class implements an interface by providing the methods written in the interface. A class that implements the interface uses the keyword IMPLEMENTS in the class header. This designation requires the class to have defined all methods in this interface, if this does not occur then errors will be produced. In addition, instead of just abstract methods an interface can also contain constants defined using the FINAL modifier. This essentially lets several classes share a set of constants. Repeating this by starting with a triangle creates a Koch snowflake! Barnsley Fern: Starts with 1 point, and 4 systems of equations which are given a probability of being chosen to transform the next point. By calling this thousands of times, the probabilities occur uniformly and due to the functions we get what looks like a fern.  Barnsley Fern: Starts with 1 point, and 4 systems of equations which are given a probability of being chosen to transform the next point. By calling this thousands of times, the probabilities occur uniformly and due to the functions we get what looks like a fern. is the worst case run time. The for loop runs n-1 times, the while (in the worst case, we have to move the last item all the way to the beginning) loop runs n-1, therefore we have n*n is Python has four basic inbuilt data structures namely Lists, Dictionary, Tuple and Set. The above mentioned topics are divided into four sections below, however, Lists and Tuples can all be seen as an implementation of an array. Recall that an array consists of elements that can be located based on their index. Python includes several array-like data structures in its standard library that each have slightly different characteristics. Let’s take a look. Lists are dynamically sized arrays meaning we can add and remove values. (Similar to vector in C++ and ArrayList in Java). Lists can contain multiple data types. A single list may contain data types like Integers, Strings, as well as Objects. Lists are mutable, and hence, they can be altered even after their creation.The elements in a list are indexed according to a definite sequenceand the indexing of a list is done with 0 being the first index. Eachelement in the list has its definite place in the list, which allowsduplication of elements in the list. Unlike lists Python’s tuple objects are immutable. (Similar to arrays in Java BUT you can not change values) This means elements can’t be added or removed dynamically. That is, all elements in a tuple must be defined at creation time. Tuples are another data structure that can hold elements of arbitrary data types."

### the line below is another section of training text that can be used if neccessary.
'''
EXTENDS which indicates the use of INHERITANCE. Notice that the field pages can now be used and applied in the Dictionary class because of the extends keyword. We then define our RUNNER class, which then indicates that we can run both methods for our Dictionary object. ICS4U OOP UML Example Summary Notes: Dictionary uses the extends keyword which means that it automatically inherits all of the definitions of the pageMessage method and the pages variable Inheritance is a one-way street: Book cannot use variables of Dictionary class (dictionary has pages because all books have pages, but not all books have definitions like a dictionary) Inheritance relationships are shown graphically: computer science The Super Reference: The reserved word SUPER can be used in a class to refer to its parent class. Using this reference we can access the members of the parent class. One of the uses of the super keyword is to invoke a parent’s constructor, let's look at a modification of the example we just described. Ex2: object-oriented programming ICS4U OOP Some Key Notes: The super keyword is a reference call to a constructor of the parent class, in this case it makes sure that the variables are set in the constructor before the program continues running. This means that essentially the Dictionary2 class is using the constructor already defined in the Book2 class because Dictonary2 inherits from Book2 The super keyword is not limited to only being used by constructors; you can also use it when referring to output methods. diagram In Class Example: You are to write a class Student that will define a class called Student with a name and a set number of courses. We then want to define a class called StudentAthlete that will inherit properties from Student but will define the sport that the student plays. Both methods should handle output.. recursion 2.4 Hiding Information and Fields Creating programs where some information within a class is inaccessible, or hidden, from the outside world is called ENCAPSULATION. It is possible to encapsulate both data fields and methods, depending upon the use of the public and private modifiers. It is one of the four key principles of Object Oriented Programming. Encapsulation in java involves using private attributes and constants. We saw constants in grade 11 using the keyword “final” which will be the same concept we use here. The keyword “private” is used in front of a variable declaration to state that it is hidden from outside classes. complexity Java: Modifiers are reserved words in Java that offer some special characteristics when working with the Java language. We have already seen one modifier FINAL which is used to declare constants.
In this sense, neural networks refer to systems of neurons, either organic or artificial in nature. The connections are called edges. Neurons and edges typically have a weight that adjusts as learning proceeds. The weight increases or decreases the strength of the signal at a connection. Neurons may have a threshold such that a signal is sent only if the aggregate signal crosses that threshold. Typically, neurons are aggregated into layers. Different layers may perform different transformations on their inputs. Signals travel from the first layer (the input layer), to the last layer (the output layer), possibly after traversing the layers multiple. Some modifiers are called visibility modifiers and control whether code can see what is inside an object. The reserved words PUBLIC and PRIVATE are used as visibility modifiers. data structures PUBLIC: means that a member of a class can be seen, read or changed from outside of the object, these variables let code outside of the class reach in and read or change the value of the data. PRIVATE: refers to the member of the class being used anywhere inside but not outside the class definition. Data that is declared as PRIVATE can be read or changed only by the methods of the class, which makes the objects created from the class self- governing. public private Variables Does not protect data Protects data Methods Generic methods able to be used throughout multiple classes Supports other methods in the class So far, we have primarily declared all of the fields in our classes in a form similar to that used for variables. class Fraction ICS4U Unit 2: Object Oriented Programming We frequently wish to limit direct access to some fields of a class, so that direct visibility is limited to methods within the same class. To accomplish this, we specify the PRIVATE modifier with those fields that we wish to hide from the outside world. In practice, private is typically ALWAYS used. Now the fields cannot be seen or altered from outside the Fraction class.
An interface: declares only method headers and public constants. cannot be instantiated. can be implemented by a class. cannot extend a class. can extend several other interfaces. The Java standard class library contains a number of important interfaces. The Comparable interface is one that is defined in the Java.lang package. It contains one method compareTo that can take in an object as a parameter and returns an integer. This interface gives us a way of comparing two objects, for example is object1 less than object2. However, the important thing to know is that the programmer has to decide what it means to be less than, equal to or greater than one another. It is this code that will correspond to the abstract method that is defined in the interface. A class is declared in this form by including the abstract modifier in the class header. Any class containing abstract methods must be declared as abstract. The modifier must also be applied to each abstract method. This form of classes is kind of like a placeholder in which they contain a partial description that is inherited by descents however the children fill in more of the gaps. Consider the following hierarchy diagram: If we declare some variable called speed in Vehicle, it will be the same in all three Child classes. However, if we declare an abstract method called fuelConsumption we are going to have different details for each Child class. Abstract methods are used for the speak and move methods as for all of the different pets that could be Child classes to the Pet class could potentially have different speak/move requirements. You can not make a pet object (try it in the Main!) Sierpinski Triangle: Starts with one triangle, then divides it into 4 equal triangles by finding the midpoints of the side lengths and connecting them. This creates 4 new equal triangles, in which we can repeat this process for. (By definition, we cut out the middle one) Koch Snowflake: Takes a straight line and divides it into 3 equal parts. Using the middle as a base, an equilateral triangle is created, and the base is removed.
Having this flexibility is powerful, but can cause the structure to take up more space. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Meaning that even if the data is repeated more than one time, it would be entered into the set only once. Curly braces or the set() function can be used to create sets. Note: to create an empty set you have to use set(), not {}; the latter creates an empty dictionary, a data structure that we discuss in the next section. In Python, dictionaries (or dicts for short) store an arbitrary number of objects, each identified by a unique dictionary key. Dictionaries are also often called maps, hashmaps, lookup tables, or associative arrays. They allow for the efficient lookup, insertion, and deletion of any object associated with a given key. It consists of key value pairs. The value can be accessed by unique key in the dictionary. Note that keys are unique & immutable objects. This analogy breaks down somewhat when it comes to how the information is organized to allow for fast lookups. But the fundamental performance characteristics hold. Dictionaries allow you to quickly find the information associated with a given key. A dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are outputted. Click on the link above to see an example."
'''
# convertLengthData
# @@para: sent, size
# @@return: list
# Description: a function that converts a string into a list of strings, each the same given length
def convertLengthData(sent, size):
    sent = sent.split()
    lenSent = len(sent)
    finalSent = []
    numParts = lenSent // size
    if lenSent // size < lenSent / size:
        numParts += 1
    if lenSent > size:
        for i in range(numParts):
            finalSent.append("")
            for j in range(size):
                if i * size + j < lenSent:
                    finalSent[i] += " " + sent[i * size + j]
    return finalSent

# trainDataP_II
# @@para: none
# @@return: list
# Description: a function that returns the training text into a list of sentences, each has a length of 10
def trainDataP_II():
    return convertLengthData(sentence, 10)
